---
title: "Election Districts K-Means Clustering"
format: 
  html:
    page-layout: custom
server: shiny
---
This app clusters NYC Election Districts on two variables using K-Means clustering. First, select two variables from the drop-down menus below. The graph will update showing the clusters using a default setting of 3 clusters. Then, adjust the number of clusters to any number between 1-9. The graph will show how the data splits between these clusters, and the table below the graph will show the mean values of the selected columns for each cluster. Once you are happy with the number of clusters and the division of the data, scroll down to the map to see the location of the clusters. 

NB: The data has been standardized, 0 is the mean for each variable. 

```{r, echo=FALSE,warning=FALSE, message=FALSE}
#| context: setup
suppressPackageStartupMessages(library(tidyverse))
library(leaflet)
library(sf)

eds <- read_sf('data/nyed_22a')
eds <- st_transform(eds, crs = 4326)
raw <- read_csv('data/clustering_raw_data.csv')
df <- as.data.frame(scale(raw))
lookup<-c(non_hispanic_white = 'nhw21p',non_hipanic_black = 'nhb21p',
          non_hispanic_asian = 'nha21p',hispanic = 'h21p',biden_share_2020 ='pg20jrbp',
          trump_share_2020 = 'pg20djtp',female_headed_household = 'femHHH_ratio',
          median_household_income = 'mhhi21',ba_or_more_share = 'cvap21bapp',
          irish_ancestry = "rv21italp",italian_ancestry = "rv21irp", west_indian_share = "winda21p",
          percent_homeowners = "p21own",percent_renters = "p21rent",
          percent_oos_whites = 'white_transplant_ratio', percent_fb_blacks = "black_fb_ratio",
          percent_nys_born_blacks = "black_nys_ratio"
)
df <- rename(df, all_of(lookup))
```



```{r}
#| panel: sidebar
vars <- setdiff(names(df), c('ElectDist',"min_noise","max_noise",'min_arrests',
                             "range_of_noise","range_of_arrests","h21p"))
selectInput('xcol', 'X Variable', vars)
selectInput('ycol', 'Y Variable', vars, selected = vars[[2]])
numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)
```


```{r}
#| panel: fill
plotOutput('plot1')
```

</br>
The mean values for each cluster.

```{r}
#| panel: fill
tableOutput("cluster_summary")
```


</br>

Click on a district to see the cluster number and the mean value for each selected column. 

```{r}
#| panel: fill
leafletOutput("map")
```



```{r}
#| context: server

selectedData <- reactive({
    df[, c(input$xcol, input$ycol)]
})

clusters <- reactive({
    kmeans(selectedData(), input$clusters)
})

# Define a shared palette with a fixed length
shared_palette <- c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
                    "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999")

# Create a reactive mapping of clusters to colors
cluster_colors <- reactive({
    cluster_ids <- unique(clusters()$cluster)  # Get unique cluster IDs
    color_mapping <- setNames(shared_palette[1:length(cluster_ids)], cluster_ids)
    color_mapping
})

# Make the plot
output$plot1 <- renderPlot({
    color_mapping <- cluster_colors()
    par(mar = c(5.1, 4.1, 0, 1))
    plot(selectedData(),
         col = color_mapping[as.character(clusters()$cluster)],  # Map cluster to color
         pch = 20, cex = 2)
    points(clusters()$centers, 
           col = color_mapping[as.character(1:input$clusters)], 
           pch = 4, cex = 4, lwd = 4)
})

# Make the map with clickable popups
output$map <- renderLeaflet({
    # Add cluster assignment to the dataset
    eds$cluster <- as.numeric(clusters()$cluster)
    
    # Ensure selected columns are added to eds
    eds[[input$xcol]] <- df[[input$xcol]]
    eds[[input$ycol]] <- df[[input$ycol]]
    
    color_mapping <- cluster_colors()
    
    # Create a color function based on the fixed mapping
    pal <- colorFactor(palette = unname(color_mapping), domain = unique(eds$cluster))
    
    # Add interactivity to show cluster and values
    eds$popup_info <- paste0(
        "<strong>Cluster:</strong> ", eds$cluster, "<br>",
        "<strong>", input$xcol, ":</strong> ", eds[[input$xcol]], "<br>",
        "<strong>", input$ycol, ":</strong> ", eds[[input$ycol]]
    )
    
    leaflet(eds) |> 
        addTiles() |> 
        setView(-74.0060, 40.7128, zoom = 10) |> 
        addPolygons(
            fillColor = ~pal(cluster), 
            color = "white", 
            weight = 1, 
            opacity = .3, 
            fillOpacity = 0.7,
            popup = ~popup_info
        ) |> 
        addLegend(pal = pal, values = ~cluster, title = "District Clusters")
})

# Get descriptive stats
clusterSummary <- reactive({
    cluster_data <- cbind(selectedData(), cluster = clusters()$cluster)
    cluster_data <- as.data.frame(cluster_data)
    
    summary <- cluster_data %>%
        group_by(cluster) %>%
        summarize(
            Avg_X = mean(get(input$xcol), na.rm = TRUE),
            Avg_Y = mean(get(input$ycol), na.rm = TRUE),
            .groups = "drop"
        )
    
    # Get the color mapping for each cluster
    color_mapping <- cluster_colors()
    summary <- summary %>%
        mutate(Color = color_mapping[as.character(cluster)])
    
    colnames(summary) <- c("Cluster", paste("Avg", input$xcol, sep = "_"), paste("Avg", input$ycol, sep = "_"), "Color")
    summary
})

output$cluster_summary <- renderTable({
    summary <- clusterSummary()
    summary$Color <- sprintf('<span style="display:inline-block;width:20px;height:20px;background-color:%s;"></span>', summary$Color)
    summary
}, rownames = FALSE, sanitize.text.function = function(x) x)  # Allow HTML


```


